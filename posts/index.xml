<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on nagymarci.hu</title><link>https://nagymarci.github.io/posts/</link><description>Recent content in Posts on nagymarci.hu</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 18 Nov 2023 14:45:22 +0100</lastBuildDate><atom:link href="https://nagymarci.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Unit Testing with Auto-generated REST Clients</title><link>https://nagymarci.github.io/posts/unit-testing-with-autogenerated-clients/</link><pubDate>Sat, 18 Nov 2023 14:45:22 +0100</pubDate><guid>https://nagymarci.github.io/posts/unit-testing-with-autogenerated-clients/</guid><description>Oftentimes in our application we have to call HTTP endpoints to send or request data. If we are lucky, the service maintainer provides a client implementation to make it easier to use the provided REST API from our application directly. If we are less lucky there is an OpenApi spec that we can use to generate the client so we don&amp;rsquo;t have to craft the requests and process the responses manually.</description></item><item><title>Integration Tests in Go</title><link>https://nagymarci.github.io/posts/integration-tests-in-go/</link><pubDate>Sun, 16 Oct 2022 19:46:17 +0200</pubDate><guid>https://nagymarci.github.io/posts/integration-tests-in-go/</guid><description>&lt;p>In this piece of article I&amp;rsquo;m going to go through how to write extensive integration tests for our Go
applications. The purpose of this exercise is to be able to write integration tests without mocking
too much dependencies but also avoid connecting to other services, ie. remote servers, remote databases,
etc. Everything should exist locally on the host running the test, and the test should be able to setup
testing environment without external tools.&lt;/p></description></item></channel></rss>